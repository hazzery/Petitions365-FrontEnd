import {useEffect, useState} from 'react';

// This file was mostly generated by GitHub Copilot Chat

interface ValidationRules {
    required?: boolean,
    maxLength?: number,
    minLength?: number,
    email?: boolean
}

interface ValidationState {
    value: string,
    error: string | null
}

export default function useFieldValidation(
    rules: ValidationRules, initialValue: string = ''
): [ValidationState, (v: string) => void] {
    const [value, setValue] = useState(initialValue);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        let newError = null;

        if (rules.required && value.trim() === '') {
            newError = 'This field is required';
        } else if (rules.maxLength && value.length > rules.maxLength) {
            newError = `This field cannot exceed ${rules.maxLength} characters`;
        } else if (rules.minLength && value.length < rules.minLength) {
            newError = `This field must be at least ${rules.minLength} characters`;
        } else if (rules.email && !value.match(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)) {
            newError = 'Invalid email format';
        }

        setError(newError);
    }, [value, rules]);

    return [{value, error}, setValue];
}
